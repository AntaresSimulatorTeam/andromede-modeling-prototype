# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,133,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,
        12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,3,15,95,8,15,1,16,4,16,98,
        8,16,11,16,12,16,99,1,16,1,16,4,16,104,8,16,11,16,12,16,105,3,16,
        108,8,16,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,5,19,118,8,19,10,
        19,12,19,121,9,19,1,20,1,20,1,20,1,20,1,20,3,20,128,8,20,1,21,1,
        21,1,21,1,21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,0,29,0,31,0,33,14,35,15,37,16,39,17,41,18,43,
        19,1,0,3,1,0,48,57,3,0,65,90,95,95,97,122,3,0,9,10,13,13,32,32,136,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,47,
        1,0,0,0,5,49,1,0,0,0,7,51,1,0,0,0,9,53,1,0,0,0,11,55,1,0,0,0,13,
        57,1,0,0,0,15,59,1,0,0,0,17,63,1,0,0,0,19,79,1,0,0,0,21,82,1,0,0,
        0,23,84,1,0,0,0,25,86,1,0,0,0,27,88,1,0,0,0,29,90,1,0,0,0,31,94,
        1,0,0,0,33,97,1,0,0,0,35,109,1,0,0,0,37,111,1,0,0,0,39,115,1,0,0,
        0,41,127,1,0,0,0,43,129,1,0,0,0,45,46,5,46,0,0,46,2,1,0,0,0,47,48,
        5,45,0,0,48,4,1,0,0,0,49,50,5,40,0,0,50,6,1,0,0,0,51,52,5,41,0,0,
        52,8,1,0,0,0,53,54,5,47,0,0,54,10,1,0,0,0,55,56,5,42,0,0,56,12,1,
        0,0,0,57,58,5,43,0,0,58,14,1,0,0,0,59,60,5,115,0,0,60,61,5,117,0,
        0,61,62,5,109,0,0,62,16,1,0,0,0,63,64,5,115,0,0,64,65,5,117,0,0,
        65,66,5,109,0,0,66,67,5,95,0,0,67,68,5,99,0,0,68,69,5,111,0,0,69,
        70,5,110,0,0,70,71,5,110,0,0,71,72,5,101,0,0,72,73,5,99,0,0,73,74,
        5,116,0,0,74,75,5,105,0,0,75,76,5,111,0,0,76,77,5,110,0,0,77,78,
        5,115,0,0,78,18,1,0,0,0,79,80,5,46,0,0,80,81,5,46,0,0,81,20,1,0,
        0,0,82,83,5,44,0,0,83,22,1,0,0,0,84,85,5,91,0,0,85,24,1,0,0,0,86,
        87,5,93,0,0,87,26,1,0,0,0,88,89,7,0,0,0,89,28,1,0,0,0,90,91,7,1,
        0,0,91,30,1,0,0,0,92,95,3,29,14,0,93,95,3,27,13,0,94,92,1,0,0,0,
        94,93,1,0,0,0,95,32,1,0,0,0,96,98,3,27,13,0,97,96,1,0,0,0,98,99,
        1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,107,1,0,0,0,101,103,5,46,
        0,0,102,104,3,27,13,0,103,102,1,0,0,0,104,105,1,0,0,0,105,103,1,
        0,0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,101,1,0,0,0,107,108,1,
        0,0,0,108,34,1,0,0,0,109,110,5,116,0,0,110,36,1,0,0,0,111,112,5,
        109,0,0,112,113,5,97,0,0,113,114,5,120,0,0,114,38,1,0,0,0,115,119,
        3,29,14,0,116,118,3,31,15,0,117,116,1,0,0,0,118,121,1,0,0,0,119,
        117,1,0,0,0,119,120,1,0,0,0,120,40,1,0,0,0,121,119,1,0,0,0,122,128,
        5,61,0,0,123,124,5,62,0,0,124,128,5,61,0,0,125,126,5,60,0,0,126,
        128,5,61,0,0,127,122,1,0,0,0,127,123,1,0,0,0,127,125,1,0,0,0,128,
        42,1,0,0,0,129,130,7,2,0,0,130,131,1,0,0,0,131,132,6,21,0,0,132,
        44,1,0,0,0,7,0,94,99,105,107,119,127,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    NUMBER = 14
    TIME = 15
    MAX = 16
    IDENTIFIER = 17
    COMPARISON = 18
    WS = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'-'", "'('", "')'", "'/'", "'*'", "'+'", "'sum'", "'sum_connections'", 
            "'..'", "','", "'['", "']'", "'t'", "'max'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "TIME", "MAX", "IDENTIFIER", "COMPARISON", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "DIGIT", 
                  "CHAR", "CHAR_OR_DIGIT", "NUMBER", "TIME", "MAX", "IDENTIFIER", 
                  "COMPARISON", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


